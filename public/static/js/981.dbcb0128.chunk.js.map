{"version":3,"file":"static/js/981.dbcb0128.chunk.js","mappings":"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","sources":["places/pages/NewPlace.js","shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext } from 'react';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './PlaceForm.css';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { PLACE_ID, SERVER_URL_BASE } from '../../shared/util/Constans';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHistory } from 'react-router-dom';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const {isLoading, error, sendRequest, clearError} = useHttpClient()\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      },\n      address: {\n        value: '',\n        isValid: false\n      },\n      image: {\n        value: null, \n        isValid: false\n      }\n    },\n    false\n  );\n\n  const history = useHistory()\n\n  const placeSubmitHandler = async event => {\n    event.preventDefault();\n    let placeData = new FormData()\n    placeData.append('title', formState.inputs.title.value)\n    placeData.append('description', formState.inputs.description.value)\n    placeData.append('address', formState.inputs.address.value)\n    placeData.append('image', formState.inputs.image.value) //this is sent as an image\n    try {\n      await sendRequest( SERVER_URL_BASE+PLACE_ID, 'POST', placeData, {\n        Authorization: `Bearer ${auth.token}`\n      })\n      history.push('/')\n    } catch (error) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError}/>\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay/>}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (at least 5 characters).\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address.\"\n          onInput={inputHandler}\n        />\n        <ImageUpload \n          id='image' \n          onInput={inputHandler} \n          errorText={'Please, provide an image!!'}\n          center\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport './ImageUpload.css'\r\nimport Button from './Button';\r\n\r\nconst ImageUpload = props => {\r\n    const filePickerRef = useRef()\r\n    const [file, setFile] = useState()\r\n    const [previewUrl, setPreviewUrl] = useState()\r\n    const [isValid, setIsValid] = useState(false)\r\n\r\n    const pickedHandler = event => {\r\n        const files = event.target.files\r\n        let fileIsValid = isValid\r\n        if (files || files.length === 1){\r\n            setFile(files[0])\r\n            fileIsValid = true\r\n        }\r\n        else{\r\n            fileIsValid = false\r\n        }\r\n        setIsValid(fileIsValid)\r\n        props.onInput(props.id, files[0], fileIsValid)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (!file){\r\n            return\r\n        }\r\n        const fileReader = new FileReader()\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result)\r\n        }\r\n        fileReader.readAsDataURL(file)\r\n\r\n    }, [file])\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click()\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input \r\n                id={props.id} \r\n                ref={filePickerRef}\r\n                style={{display: 'none'}} \r\n                type=\"file\" \r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"preview\" />}\r\n                    {!previewUrl && <p>Please pick an image!!</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}> \r\n                    PICK IMAGE \r\n                </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    )     \r\n}\r\n\r\nexport default ImageUpload","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["NewPlace","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","formState","inputHandler","useForm","title","value","isValid","description","address","image","history","useHistory","_jsxs","React","children","_jsx","ErrorModal","onClear","className","onSubmit","async","event","preventDefault","placeData","FormData","append","inputs","SERVER_URL_BASE","PLACE_ID","Authorization","concat","token","push","LoadingSpinner","asOverlay","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","ImageUpload","center","Button","disabled","props","filePickerRef","useRef","file","setFile","useState","previewUrl","setPreviewUrl","setIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","onChange","files","target","fileIsValid","length","src","alt","onClick","pickImageHandler","current","click","inputReducer","state","action","val","validate","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","placeholder","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","test"],"sourceRoot":""}