{"version":3,"file":"static/js/830.2142c527.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport './PlaceForm.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { PLACE_ID, SERVER_URL_BASE } from '../../shared/util/Constans';\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext)\n  const {isLoading, error, sendRequest, clearError} = useHttpClient()\n  const [loadedPlace, setLoadedPlace] = useState()\n  const placeId = useParams().placeId;\n  const history = useHistory()\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const response = await sendRequest(\n          SERVER_URL_BASE+PLACE_ID+placeId)\n\n        setLoadedPlace(response)\n        setFormData(\n          {\n            title: {\n              value: response.title,\n              isValid: true\n            },\n            description: {\n              value: response.description,\n              isValid: true\n            }\n          },\n          true\n        )\n      } catch (error) {}\n    }\n    fetchPlace()\n  }, [sendRequest, placeId, setFormData])\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        SERVER_URL_BASE+PLACE_ID+placeId, \n        'PATCH',\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value\n        }),\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${auth.token}`\n        }\n      )\n      history.push(`/${auth.userId}/places`)\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onclear={clearError}/>\n      {isLoading && (\n          <div className=\"center\">\n            <LoadingSpinner />\n          </div>\n      )}\n      {!isLoading && loadedPlace &&\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      }\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["UpdatePlace","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","loadedPlace","setLoadedPlace","useState","placeId","useParams","history","useHistory","formState","inputHandler","setFormData","useForm","title","value","isValid","description","useEffect","async","response","SERVER_URL_BASE","PLACE_ID","fetchPlace","_jsxs","React","children","_jsx","ErrorModal","onclear","className","LoadingSpinner","onSubmit","event","preventDefault","JSON","stringify","inputs","Authorization","concat","token","push","userId","console","log","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","Button","disabled","Card","inputReducer","state","action","val","validate","isTouched","props","inputState","dispatch","useReducer","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","length","test"],"sourceRoot":""}