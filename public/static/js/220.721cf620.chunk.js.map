{"version":3,"file":"static/js/220.721cf620.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js","user/pages/Auth.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './ImageUpload.css'\r\nimport Button from './Button';\r\n\r\nconst ImageUpload = props => {\r\n    const filePickerRef = useRef()\r\n    const [file, setFile] = useState()\r\n    const [previewUrl, setPreviewUrl] = useState()\r\n    const [isValid, setIsValid] = useState(false)\r\n\r\n    const pickedHandler = event => {\r\n        const files = event.target.files\r\n        let fileIsValid = isValid\r\n        if (files || files.length === 1){\r\n            setFile(files[0])\r\n            fileIsValid = true\r\n        }\r\n        else{\r\n            fileIsValid = false\r\n        }\r\n        setIsValid(fileIsValid)\r\n        props.onInput(props.id, files[0], fileIsValid)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (!file){\r\n            return\r\n        }\r\n        const fileReader = new FileReader()\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result)\r\n        }\r\n        fileReader.readAsDataURL(file)\r\n\r\n    }, [file])\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click()\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input \r\n                id={props.id} \r\n                ref={filePickerRef}\r\n                style={{display: 'none'}} \r\n                type=\"file\" \r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"preview\" />}\r\n                    {!previewUrl && <p>Please pick an image!!</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}> \r\n                    PICK IMAGE \r\n                </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    )     \r\n}\r\n\r\nexport default ImageUpload","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\nimport { LOGIN, SERVER_URL_BASE, SIGNUP } from '../../shared/util/Constans';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {isLoading, error, sendRequest, clearError} = useHttpClient()\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false\n          }, \n          image : {\n            value: null,\n            isValid: false\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n    let serverUrl = SERVER_URL_BASE\n    let payload = null\n    let headers = {}\n    if (isLoginMode){\n      serverUrl +=LOGIN\n      payload = JSON.stringify({\n        email: formState.inputs.email.value,\n        password: formState.inputs.password.value\n      })\n      headers = { 'Content-type': 'application/json' }\n    } else {\n      serverUrl +=SIGNUP\n      payload = new FormData()\n      payload.append('email', formState.inputs.email.value)\n      payload.append('name', formState.inputs.name.value)\n      payload.append('password', formState.inputs.password.value)\n      payload.append('image', formState.inputs.image.value) //this is sent as an image\n    }\n    try {\n      const response = await sendRequest(serverUrl, 'POST', payload, headers )  \n      auth.login(response.userData._id, response.userData.token)\n    } catch (error) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError}/>\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay/>}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <React.Fragment>\n              <Input\n                element=\"input\"\n                id=\"name\"\n                type=\"text\"\n                label=\"Your Name\"\n                validators={[VALIDATOR_REQUIRE()]}\n                errorText=\"Please enter a name.\"\n                onInput={inputHandler}\n              />\n              <ImageUpload\n                id=\"image\"\n                onInput={inputHandler }\n                center\n                errorText={'Please, provide an image!!'}\n              />\n            </React.Fragment>\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"names":["props","filePickerRef","useRef","file","setFile","useState","previewUrl","setPreviewUrl","isValid","setIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","id","ref","style","display","type","accept","onChange","event","files","target","fileIsValid","length","onInput","concat","center","src","alt","Button","onClick","pickImageHandler","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","useHttpClient","inputHandler","setFormData","email","password","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","async","preventDefault","serverUrl","SERVER_URL_BASE","payload","headers","LOGIN","JSON","stringify","SIGNUP","FormData","append","name","image","response","login","userData","_id","token","Input","ImageUpload","disabled","inverse","switchModeHandler","undefined","prevMode"],"sourceRoot":""}